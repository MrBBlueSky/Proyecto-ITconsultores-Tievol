@page "/Referencias/Familias"

@inject FamiliasServices srvFamilia
@inject EstadosServices srvEstado

<TelerikGrid Data=@LstFamilias EditMode="@GridEditMode.Popup" Height="100%"
             Sortable=true Pageable=true PageSize=10 Resizable="true"
             SelectionMode="GridSelectionMode.Single">

    <GridToolBar>
        <GridCommandButton OnClick="@( () => OnClick("Add", null) )" Icon="add">Agregar</GridCommandButton>
    </GridToolBar>

    <GridColumns>
        <GridCommandColumn Width="70px">
            <GridCommandButton OnClick="@((args) => OnClick("Upd", args.Item as Familia))" Icon="edit" />
        </GridCommandColumn>
        <GridColumn Field=@nameof(Familia.ID_Familia) Title="Identificador" Width="150px" />
        <GridColumn Field=@nameof(Familia.N_Familia) Title="Descripción" />
        <GridColumn Field=@nameof(Familia.Estado) Title="Estado" Sortable="false">
            <Template>
                @( (context as Familia).Estado.N_Estado)
            </Template>
        </GridColumn>


        <GridCommandColumn Width="70px">
            <GridCommandButton Command="Delete" Icon="delete" OnClick="@((args) => OnClick("Del", args.Item as Familia))" />
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>

<TelerikWindow Visible="ShowWindow" Modal="true" Class="c-Window">
    <WindowContent>
        <EditForm Model="SelectedFamilia" OnValidSubmit="@OnSave">
            <!-- Card -->
            <div class="card" style="width: 500px; height: 450px;">
                <div class="card-header blue-gradient-rgba text-black">
                    <h5 class="card-title my-2"><strong>@TituloWindow</strong></h5>
                </div>

                <div class="card-body text-muted">
                    <DataAnnotationsValidator />
                    <div class="row my-1">
                        <div class="col">
                            <!-- ID_Familia -->
                            <label class="k-label">Identificador</label>
                            <TelerikNumericTextBox @bind-Value="SelectedFamilia.ID_Familia" Width="100%" @ref="IDInt" Enabled="false" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <!-- Nombre_Comuna -->
                            <label class="k-label">Descripción</label>
                            <TelerikTextBox @bind-Value="SelectedFamilia.N_Familia" Width="100%" />
                            <ValidationMessage For="@(() => SelectedFamilia.N_Familia)" />
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col">
                            <!-- ID_Region -->
                            <label class="k-label">Estado</label>
                            <TelerikComboBox Data="@LstEstado" @bind-Value="SelectedFamilia.Estado.ID_Estado" Width="100%"
                                             TextField="N_Estado" ValueField="ID_Estado"
                                             Placeholder="Seleccione un Estado..." ClearButton="true" Filterable="true">
                            </TelerikComboBox>
                        </div>
                    </div>

                    <div class="form-row">
                        <ValidationSummary />
                    </div>
                </div>
                <div class="card-footer">
                    <div class="form-row d-flex d-flex justify-content-between">
                        <TelerikButton Icon="@IconButton"
                                       Class="btn btn-outline-info btn-telerik"
                                       ButtonType="@ButtonType.Submit">
                            <strong>@TituloButton</strong>
                        </TelerikButton>

                        <TelerikButton Icon="cancel" OnClick="@OnCancel"
                                       Class="btn btn-outline-danger btn-telerik"
                                       ButtonType="@ButtonType.Button">Cancelar</TelerikButton>
                    </div>
                </div>
            </div>
            <!-- Card -->
        </EditForm>
    </WindowContent>
</TelerikWindow>

<TelerikNotification @ref="@Notification"></TelerikNotification>

@code {

    //
    public List<Familia> LstFamilias { get; set; }
    public List<Estado> LstEstado { get; set; }

    //
    public string Accion { get; set; }
    public Familia SelectedFamilia { get; set; }

    //
    public string TituloWindow { get; set; }
    public string TituloButton { get; set; }
    public string IconButton { get; set; }

    public bool ShowWindow { get; set; } = false;

    public TelerikNotification Notification { get; set; }

    // Referencias de tipo
    private Telerik.Blazor.Components.TelerikNumericTextBox<int> IDInt;

    //
    protected override async Task OnInitializedAsync()
    {
        LstFamilias = await srvFamilia.GetFamilias();
        LstEstado = await srvEstado.GetEstados();
    }
    //
    private void OnCancel(MouseEventArgs e)
    {
        ShowWindow = false;

    }
    //
    private void OnClick(string cAccion, Familia familia) // Problem de Excepción nula, interrupción de la aplicación. 
    {
        ShowWindow = true;
        Accion = cAccion;
        SelectedFamilia = familia;

        if (cAccion == "Add")
        {   //
            SelectedFamilia = new Familia()
            {
                ID_Familia = 0,
                N_Familia = string.Empty,
                Estado = new Estado()
                {
                    ID_Estado = 0,
                    N_Estado = string.Empty
                }

            };

            TituloWindow = "Agregar Familia";
            IconButton = "add";
        }
        else
        {   //
            SelectedFamilia = familia;

            //
            if (Accion == "Upd")
            {
                TituloWindow = "Actualizar Familia";
                TituloButton = "Guardar";
                IconButton = "save";

            }
            else
            {
                TituloWindow = "Eliminar Familia";
                TituloButton = "Eliminar";
                IconButton = "delete";

            }
        }

        StateHasChanged();
        Task.Delay(1000);
    }
    //
    private async Task OnSave()
    {
        ShowWindow = false;
        if (Accion == "Add")
        {
            if (LstFamilias.Exists(f => f.N_Familia == SelectedFamilia.N_Familia))
            {
                //toast.ShowWarning("La descripción ya se encuentra en la lista...", "ATENCION");
                return;
            }

            var response = await srvFamilia.CreateAsync(SelectedFamilia);
            if (response.IsSuccess)
            {
                LstFamilias.Add(response.Result);
                //toast.ShowSuccess("Los datos se almacenaron correctamente...", "ATENCION");
            }
            else
            {
                //toast.ShowError(response.Message, "ERROR");
            }
        }

        if (Accion == "Upd")
        {

            var response = await srvFamilia.UpdateAsync(SelectedFamilia);
            if (response.IsSuccess)
            {
                LstFamilias.Add(response.Result);
                var posicion = LstFamilias.FindIndex(f => f.ID_Familia == SelectedFamilia.ID_Familia);
                if (posicion == -1)
                {
                    //toast.ShowError("Se produjo un error inesperado...", "ERROR");
                }
                else
                {
                    LstFamilias[posicion] = SelectedFamilia;
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Los datos se almacenaron correctamente...",
                        ThemeColor = "primary",
                        ShowIcon = true
                    });
                }
            }
            else
            {
                //toast.ShowError(response.Message, "ERROR");
            }
        }

        if (Accion == "Del")
        {
            var response = await srvFamilia.DeleteAsync(SelectedFamilia);
            if (response.IsSuccess)
            {
                LstFamilias = await srvFamilia.GetFamilias();
                //toast.ShowSuccess("Los datos se eliminaron correctamente...", "ATENCION");
            }
            else
            {
                //toast.ShowError(response.Message, "ERROR");
            }
        }

        //
        LstFamilias = await srvFamilia.GetFamilias();



        StateHasChanged();
        await Task.Delay(1000);
    }
}