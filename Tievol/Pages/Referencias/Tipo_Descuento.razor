@page "/Referencias/Tipo_descuentos"

@inject TipoDescuentoServices srvTDescuentos
@inject EstadosServices srvEstados

<TelerikGrid Data=@LstTDescuentos EditMode="@GridEditMode.Popup" Height="100%"
             Sortable=true Pageable=true PageSize=10
             SelectionMode="GridSelectionMode.Single">

    <GridToolBar>
        <GridCommandButton OnClick="@( () => OnClick("Add", null) )" Icon="add">Agregar</GridCommandButton>
    </GridToolBar>

    <GridColumns>
        <GridCommandColumn Width="150px">
            <GridCommandButton OnClick="@((args) => OnClick("Upd", args.Item as TipoDescuento))" Icon="edit" />
            <GridCommandButton Command="Delete" Icon="delete" OnClick="@((args) => OnClick("Del", args.Item as TipoDescuento))" />
        </GridCommandColumn>
        @*<GridColumn Field=@nameof(TipoDescuento.ID_Tipo_Descuento) Title="Identificador" Width="150px" />*@
        <GridColumn Field=@nameof(TipoDescuento.N_Tipo_Descuento) Title="Nombre" />
        <GridColumn Field=@nameof(TipoDescuento.Estado) Title="Estado">
            <Template>
                @( (context as TipoDescuento).Estado.N_Estado)
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>

<TelerikWindow Visible="ShowWindow" Modal="true" Class="c-Window">
    <WindowContent>
        <EditForm Model="SelectedTDescuento" OnValidSubmit="@OnSave">
            @*Modal Tipo Descuento*@
            <div class="card" style="width: 500px; height: 450px;">
                <div class="card-header blue-gradient-rgba text-black">
                    <h5 class="card-title my-2"><strong>@TituloWindow</strong></h5>
                </div>

                <div class="card-body text-muted">
                    <DataAnnotationsValidator />
                    <!--<div class="row my-1">
            <div class="col">-->
                    @*Identificador*@
                    <!--<label class="k-label">Identificador</label>
                    <TelerikNumericTextBox @bind-Value="SelectedTDescuento.ID_Tipo_Descuento" Width="100%" @ref="IDInt" Enabled="false" />
                </div>
            </div>-->
                    <div class="row mt-2">
                        <div class="col">
                            @*Nombre*@
                            <label class="k-label">Nombre</label>
                            <TelerikTextBox @bind-Value="SelectedTDescuento.N_Tipo_Descuento " Width="100%" />
                            <ValidationMessage For="@(() => SelectedTDescuento.N_Tipo_Descuento)" />
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col">
                            @*Estado*@
                            <label class="k-label">Estado</label>
                            <TelerikComboBox Data="@LstEstado" @bind-Value="SelectedTDescuento.Estado.ID_Estado" Width="100%"
                                             TextField="N_Estado" ValueField="ID_Estado"
                                             Placeholder="Seleccione un Estado..." ClearButton="true" Filterable="true">
                            </TelerikComboBox>
                        </div>
                    </div>


                </div>
                <div class="card-footer">
                    <div class="form-row d-flex d-flex justify-content-between">
                        <TelerikButton Icon="@IconButton"
                                       Class="btn btn-outline-info btn-telerik"
                                       ButtonType="@ButtonType.Submit">
                            <strong>@TituloButton</strong>
                        </TelerikButton>

                        <TelerikButton Icon="cancel" OnClick="@OnCancel"
                                       Class="btn btn-outline-danger btn-telerik"
                                       ButtonType="@ButtonType.Button">Cancelar</TelerikButton>
                    </div>
                </div>
            </div>
            @*End Modal Tipo Descuento*@
        </EditForm>
    </WindowContent>
</TelerikWindow>

<TelerikNotification @ref="@Notification"></TelerikNotification>

@code { 
            public List<TipoDescuento> LstTDescuentos { get; set; }
            public List<Estado> LstEstado { get; set; }
            
            public string Accion { get; set; }
            public TipoDescuento SelectedTDescuento { get; set; }

            
            public string TituloWindow { get; set; }
            public string TituloButton { get; set; }
            public string IconButton { get; set; }

            public bool ShowWindow { get; set; } = false;

            public TelerikNotification Notification { get; set; }
            private System.Threading.ManualResetEvent Trigger = new System.Threading.ManualResetEvent(false);
            // Referencias de tipo
            private Telerik.Blazor.Components.TelerikNumericTextBox<int> IDInt;

            
            protected override async Task OnInitializedAsync()
            {
                LstEstado = await srvEstados.GetEstados();
                LstTDescuentos = await srvTDescuentos.GetTipoDescuento();
            }
            
            private void OnCancel(MouseEventArgs e)
            {
                ShowWindow = false;
                Task.Delay(5000);
                StateHasChanged();

            }
            
            private void OnClick(string cAccion, TipoDescuento Tipo_descuento)
            {
                ShowWindow = true;
                Accion = cAccion;
                SelectedTDescuento = Tipo_descuento;

                if (cAccion == "Add")
                {   
                    SelectedTDescuento = new TipoDescuento()
                    {
                        ID_Tipo_Descuento = 0,
                        N_Tipo_Descuento = string.Empty,
                        Estado = new Estado()
                        {
                            ID_Estado = 0,
                            N_Estado = string.Empty
                        }

                    };

                    TituloWindow = "Agregar Tipo de Descuento";
                    TituloButton = "Agregar";
                    IconButton = "add";
                }
                else
                {   
                    SelectedTDescuento = Tipo_descuento;

                    
                    if (Accion == "Upd")
                    {
                        TituloWindow = "Actualizar Tipo de Descuento";
                        TituloButton = "Guardar";
                        IconButton = "save";

                    }
                    else
                    {
                        TituloWindow = "Eliminar Tipo de Descuento";
                        TituloButton = "Eliminar";
                        IconButton = "delete";

                    }
                }

                Task.Delay(5000);
                
                StateHasChanged();
                Task.Delay(500);
                Trigger.Set();
            }
            
            private async Task OnSave()
            {
                ShowWindow = false;
                if (Accion == "Add")
                {
                    if (LstTDescuentos.Exists(td => td.N_Tipo_Descuento == SelectedTDescuento.N_Tipo_Descuento))
                    {
                        
                        return;
                    }

                    var response = await srvTDescuentos.CreateAsync(SelectedTDescuento);
                    if (response.IsSuccess)
                    {
                        LstTDescuentos.Add(response.Result);
                        
                    }
                    else
                    {
                        
                    }
                }

                if (Accion == "Upd")
                {

                    var response = await srvTDescuentos.UpdateAsync(SelectedTDescuento);
                    if (response.IsSuccess)
                    {
                        LstTDescuentos.Add(response.Result);
                        var posicion = LstTDescuentos.FindIndex(td => td.ID_Tipo_Descuento == SelectedTDescuento.ID_Tipo_Descuento);
                        if (posicion == -1)
                        {
                            
                        }
                        else
                        {
                            LstTDescuentos[posicion] = SelectedTDescuento;
                            Notification.Show(new NotificationModel()
                            {
                                Text = "Los datos se almacenaron correctamente...",
                                ThemeColor = "primary",
                                ShowIcon = true
                            });
                        }
                    }
                    else
                    {
                        
                    }
                }

                if (Accion == "Del")
                {
                    var response = await srvTDescuentos.DeleteAsync(SelectedTDescuento);
                    if (response.IsSuccess)
                    {
                        LstTDescuentos = await srvTDescuentos.GetTipoDescuento();
                        
                    }
                    else
                    {
                        
                    }
                }

                
                LstTDescuentos = await srvTDescuentos.GetTipoDescuento();
                Trigger.Reset();
                StateHasChanged();
            } }