@page "/Referencias/Ciudades"
@inject CiudadesServices srvCiudades
@inject RegionesServices  srvRegiones



<TelerikGrid Data=@LstCiudades EditMode="@GridEditMode.Popup" Height="100%"
             Sortable=true Pageable=true PageSize=10
             SelectionMode="GridSelectionMode.Single">

    <GridToolBar>
        <GridCommandButton OnClick="@( () => OnClick("Add", null) )" Icon="add">Agregar</GridCommandButton>
    </GridToolBar>

    <GridColumns>
        <GridCommandColumn Width="150px">
            <GridCommandButton OnClick="@((args) => OnClick("Upd", args.Item as Ciudad))" Icon="edit" />
            <GridCommandButton Command="Delete" Icon="delete" OnClick="@((args) => OnClick("Del", args.Item as Ciudad))" />
        </GridCommandColumn>
        @*<GridColumn Field=@nameof(Ciudad.ID_Ciudad) Title="Identificador" Width="150px" />*@
        <GridColumn Field=@nameof(Ciudad.N_Ciudad) Title="Nombre" />
        <GridColumn Field=@nameof(Ciudad.Region) Title="Región">
            <Template>
                @( (context as Ciudad).Region.N_Region)
            </Template>
        </GridColumn>
    </GridColumns>
</TelerikGrid>

<TelerikWindow Visible="ShowWindow" Modal="true" Class="c-Window">
    <WindowContent>
        <EditForm Model="SelectedCiudad" OnValidSubmit="@OnSave">
            @*Modal Ciudad*@
            <div class="card" style="width: 500px; height: 400px;">
                <div class="card-header blue-gradient-rgba text-black">
                    <h5 class="card-title my-2"><strong>@TituloWindow</strong></h5>
                </div>

                <div class="card-body text-muted">
                    <DataAnnotationsValidator />
            
                    <div class="row mt-2">
                        <div class="col">
                            @*Nombre*@
                            <label class="k-label">Nombre de la Ciudad</label>
                            <TelerikTextBox @bind-Value="SelectedCiudad.N_Ciudad" Width="100%" />
                            <ValidationMessage For="@(() => SelectedCiudad.N_Ciudad)" />
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col">
                            @*Región*@
                            <label class="k-label">Región</label>
                            <TelerikComboBox Data="@LstRegiones" @bind-Value="SelectedCiudad.Region.ID_Region" Width="100%"
                                             TextField="N_Region" ValueField="ID_Region"
                                             Placeholder="Seleccione una Región..." ClearButton="true" Filterable="true">
                            </TelerikComboBox>
                        </div>
                    </div>

                    <div class="form-row">
                        <ValidationSummary />
                    </div>
                </div>
                <div class="card-footer">
                    <div class="form-row d-flex d-flex justify-content-between">
                        <TelerikButton Icon="@IconButton"
                                       Class="btn btn-outline-info btn-telerik"
                                       ButtonType="@ButtonType.Submit">
                            <strong>@TituloButton</strong>
                        </TelerikButton>

                        <TelerikButton Icon="cancel" OnClick="@OnCancel"
                                       Class="btn btn-outline-danger btn-telerik"
                                       ButtonType="@ButtonType.Button">Cancelar</TelerikButton>
                    </div>
                </div>
            </div>
            @*End Modal Ciudad*@
        </EditForm>
    </WindowContent>
</TelerikWindow>
<TelerikNotification @ref="@Notification"></TelerikNotification>

@code { // Referencias de tipo
    public List<Ciudad> LstCiudades { get; set; }
    public List<Region> LstRegiones { get; set; }
    public string Accion { get; set; }
    public Ciudad SelectedCiudad { get; set; }
    public string TituloWindow { get; set; }
    public string TituloButton { get; set; }
    public string IconButton { get; set; }
    public bool ShowWindow { get; set; } = false;
    private Telerik.Blazor.Components.TelerikNumericTextBox<int> IDInt;
    public TelerikNotification Notification { get; set; }


    protected override async Task OnInitializedAsync()
    {
        LstCiudades = await srvCiudades.GetCiudades();
        LstRegiones = await srvRegiones.GetRegiones();
    }

    private void OnCancel(MouseEventArgs e)
    {
        ShowWindow = false;
        StateHasChanged();

    }

    private void OnClick(string cAccion, Ciudad ciudad)
    {
        ShowWindow = true;
        Accion = cAccion;
        SelectedCiudad = ciudad;

        if (cAccion == "Add")
        {
            SelectedCiudad = new Ciudad()
            {
                ID_Ciudad = 0,
                N_Ciudad = string.Empty,
                Region = new Region()
                {
                    ID_Region = 0,
                    N_Region = string.Empty
                }

            };

            TituloWindow = "Agregar Ciudad";
            TituloButton = "Agregar";
            IconButton = "add";
        }
        else
        {
            SelectedCiudad = ciudad;


            if (Accion == "Upd")
            {
                TituloWindow = "Actualizar Ciudad";
                TituloButton = "Guardar";
                IconButton = "save";

            }
            else
            {
                TituloWindow = "Eliminar Ciudad";
                TituloButton = "Eliminar";
                IconButton = "delete";

            }
        }

        StateHasChanged();

    }

    private async Task OnSave()
    {
        ShowWindow = false;
        if (Accion == "Add")
        {
            if (LstCiudades.Exists(e => e.N_Ciudad == SelectedCiudad.N_Ciudad))
            {
                //"ATENCION"
                return;
            }

            var response = await srvCiudades.CreateAsync(SelectedCiudad);
            if (response.IsSuccess)
            {
                LstCiudades.Add(response.Result);
                Notification.Show(new NotificationModel()
                {
                    Text = "Se agrego una Ciudad correctamente",
                    ThemeColor = "success",
                    ShowIcon = true
                });
            }
            else
            {
                Notification.Show(new NotificationModel()
                {
                    Text = "Se agrego una Ciudad correctamente",
                    ThemeColor = "danger",
                    ShowIcon = true
                });
                //"ERROR"
            }
        }

        if (Accion == "Upd")
        {

            var response = await srvCiudades.UpdateAsync(SelectedCiudad);
            if (response.IsSuccess)
            {
                LstCiudades.Add(response.Result);
                var posicion = LstCiudades.FindIndex(e => e.ID_Ciudad == SelectedCiudad.ID_Ciudad);
                if (posicion == -1)
                {
                    //"ERROR"
                }
                else
                {
                    LstCiudades[posicion] = SelectedCiudad;
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Se agrego una Ciudad correctamente",
                        ThemeColor = "success",
                        ShowIcon = true
                    });//"ATENCION"
                }
            }
            else
            {
                //"ERROR"
            }
        }

        if (Accion == "Del")
        {
            var response = await srvCiudades.DeleteAsync(SelectedCiudad);
            if (response.IsSuccess)
            {
                LstCiudades = await srvCiudades.GetCiudades();

            }
            else
            {
                //"ERROR"
            }
        }


        LstCiudades = await srvCiudades.GetCiudades();

        StateHasChanged();

    } }
